@page "/account/{name}"
@using Banksystem

@using System.Linq;


@if (SelectedAccount == null)
{
    <p>No account '@AccountName' found</p>
    <p>And there are @Bank.Accounts.Count() accounts</p>
}

else
{
    <h1>Welcome @name, @SelectedAccount.Owner.Lastname</h1>
    <div ID="AccountBalanceStyle">


    <span> Current Checkingbalance: @SelectedAccount.Owner.CheckingBalance.ToString("c") </span><br />
    @if (SelectedAccount.Owner.savingaccount == true)
        {
            <p>Current Savingbalance: @SelectedAccount.Owner.SavingBalance.ToString("c")</p>
            <label> Deposit for Saving
                <input @bind=TransferMoney />
            </label>
            <button @onclick="TransferMoneyToSaving">Transfer to Saving</button>
            <button @onclick="TransfertMoneyToChecking">Transfer to Checking</button><br>
        }


        <label>Deposit for checking
            <input @bind=depositAmount />
        </label>
        <button @onclick="makeDeposit">Make Deposit</button>
        <button @onclick="Withdraw">withdrawn</button>
        <br>

        @if (SelectedAccount.Owner.Credit == false)
        {
            <p>Amount of credit:
                <input @bind=Creditamount />
                <button @onclick="GetCreditMoney">Get Credit</button>
            </p>
        }
        @if (SelectedAccount.Owner.savingaccount == false)
        {
            <button @onclick="Createsavingaccount">Create Savingaccount</button>
        }
        <br>
        @if (SelectedAccount.Owner.CheckingBalance >= SelectedAccount.Owner.creditamount && SelectedAccount.Owner.Credit ==
       true)
        {
            <button @onclick="PayBackMoney">Pay Credit back</button>
        }
        
    </div>
    <h2>Account Information</h2>
    <div id="AccountBalanceStyle">


    <table>

        <tr>
            Name:
        </tr>
        <td>
            @SelectedAccount.Owner.Name
        </td>
        <tr>
            Lastname:
        </tr>
        <td>
            @SelectedAccount.Owner.Lastname
        </td>
        <tr>
            Balance:
        </tr>
        <td>
            @SelectedAccount.Owner.CheckingBalance.ToString("c")
        </td>
        <tr>
            Birhtdate:
        </tr>
        <td>
            @SelectedAccount.Owner.Birthdate.Month/@SelectedAccount.Owner.Birthdate.Day/@SelectedAccount.Owner.Birthdate.Year<br>
        </td>
        <tr>
            Savingaccount:
        </tr>
        <td>
            @SelectedAccount.Owner.savingaccount
        </td>
        <tr>
            Creditamount:
        </tr>
        <td>
            @SelectedAccount.Owner.creditamount
        </td>
        <tr>
            Account Number:
        </tr>
        <td>
            @SelectedAccount.Owner.AccountNumber
        </td>
    </table>
</div>




    @log

    <h3>Activities:</h3>
    <div id="AccountBalanceStyle">

    @foreach (var log in customerLogs)
        {
            @log <br>
        }
    </div>
}


@code
{
    [Parameter]
    public string name { get; set; }
    public string lastname { get; set; }
    public string AccountName { get; set; }
    int day;
    int Month;
    int Year;
    string log;
    bool Savingaccount = false;
    decimal savingbalance = 0;
    decimal Creditamount = 0;
    int Accoutnumber;
    IEnumerable<string> customerLogs;

    decimal depositAmount;
    decimal TransferMoney;
    public Banksystem.Account SelectedAccount;

    protected override void OnInitialized()
    {
        OnRefresh();
    }
    public void OnRefresh()
    {
        if (Bank.Accounts.Count > 0)
        {
            foreach (var customer in Bank.Accounts)
            {
                if (customer.Owner.Name == name)
                {
                    SelectedAccount = customer;
                    break;
                }
            }

        }
        //Bank.LoadAccounts();
        logging.LoadLog();
        customerLogs = from log in logging.logs
                       where log.Contains($"ID: {SelectedAccount.Owner.ID}")
                       select log;

    }

    void Createsavingaccount()
    {
        SelectedAccount.Owner.savingaccount = true;
        SelectedAccount.Owner.MakeSavingAccount();
        Bank.SaveAccounts();
        OnRefresh();
    }
    void makeDeposit()
    {
        SelectedAccount.Owner.MakeDeposit(depositAmount);
        Bank.SaveAccounts();
        OnRefresh();
    }
    void Withdraw()
    {
        SelectedAccount.Owner.Withdrawn(depositAmount);
        Bank.SaveAccounts();
        logging.Savelog();
        OnRefresh();
    }
    void TransferMoneyToSaving()
    {
        SelectedAccount.Owner.TransferMoneyFromCheckingToSaving(TransferMoney);
        Bank.SaveAccounts();
        logging.Savelog();
        StateHasChanged();
        OnRefresh();
    }
    void TransfertMoneyToChecking()
    {
        SelectedAccount.Owner.TransferMoneyFromSavingToChecking(TransferMoney);
        Bank.SaveAccounts();
        logging.Savelog();
        OnRefresh();
    }
    void GetCreditMoney()
    {
        SelectedAccount.Owner.getCredit(Creditamount);
        Bank.SaveAccounts();
        logging.Savelog();
        OnRefresh();
    }
    void PayBackMoney()
    {
        SelectedAccount.Owner.PayBackCredit(Creditamount);
        Bank.SaveAccounts();
        logging.Savelog();
        OnRefresh();
    }

}
